

JDK1.5开始String类中提供了一个非常有用的方法String.format(String format, Object ... args)

查看源码得知其实是调用了java.util.Formatter.format(String, Object...)方法
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    public static String format(String format, Object ... args) {  
        return new Formatter().format(format, args).toString();  
    }  

String.format(String format, Object ... args) 这个方法最重要的的地方就是它的第一个参数String format,我们只要掌握了这个参数的用法也就掌握了String.format的用法

 

首先来看一个列子
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String s2 = String.format("%1$tY-%1$tm-%1$te", new Date());  
    System.out.println(s2);  


这里会打印出什么内容?

先不急着去运行它,相信阅读到后面不用运行,你也会知道的.

 

查看JDK文档得知,String.format方法的第一个参数是有个公式可以套的

    %[argument_index$][flags][width][.precision]conversion

这里我们只要牢记这个公式就可以,下面说下每个颜色所代表的含义

argument_index: 可选,是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 "1$" 引用，第二个参数由 "2$" 引用，依此类推。

flags: 可选,用来控制输出格式

width: 可选,是一个正整数，表示输出的最小长度

precision:可选,用来限定输出字符数

conversion:必须,用来表示如何格式化参数的字符

 

先看一个简单的列子:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    System.out.println(String.format("我的名字叫%s", "小明")); // 打印:我的名字叫小明  

这里我们只用了%s这个简单的表达式,对比上面的公式,我们发现[argument_index$][flags][width][.precision]这些部分全部都省略掉了

只留下一个必须的conversion,在这里conversion就是"s",百分号%是固定不变的

[argument_index$]省略之后它会自动把"小明"这个值填入到%s中去

我再稍微改下列子:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String.format("我叫%s,她叫%s", "小明","小方"); // 我叫小明,她叫小方  


这里会按顺序分别把小明,小方填入到对应的%s中. 如果我们要把小方填在前面,小明填在后面,那该怎么做呢,[argument_index$]就派上用场了
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String.format("我叫%2$s,她叫%1$s", "小明","小方"); // 我叫小方,她叫小明  

依然是百分号%开头,中间多了个2$,1$

 

conversion可以填s,那还有什么其它字母可以填呢,当然有的比如

o:结果被格式化为八进制整数

x:结果被格式化为十六进制

d:结果被格式化为十进制整数
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    System.out.println(String.format("%o", 8)); // 10  
    System.out.println(String.format("%x", 16)); // 10  


更多的conversion类别可以参考JDK文档java.util.Formatter类


至此,我们已经了解了argument_index$和conversion的用处,接下来我们了解flag和width的用法

flag是用来控制输出格式的,比如左对齐,金额用逗号隔开等

width:表示最小宽度

先看个列子:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String.format("%1$,d", 12302562); // 12,302,562  


这里多出一个逗号",",它就是flag,用于金额千分位隔开,当然写成"%,d"也是可以的

再一个列子:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String.format("%1$08d", 123456);// 00123456  


这里0就是flag,表示结果将用零来填充,8就是width,表示最少要8位,d是conversion

至于其它的flag可以查阅JDK文档

 

接下来说下[.precision]

这个单词翻译下是精度的意思,我们发现了前面有个小数点".",因此不难联想到这个是关于浮点数类型的

只有当传入的数据是浮点数时这个才有用,整数或者日期类型的数据都不能用

比如我想要四舍五入保留两位小数,那么我可以这么写:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String.format("%1$.2f", 12.12555);// 12.13  


这里f表示传入的数字是浮点型,如果传入的是整数,或者把f改成d都会抛出异常,JDK文档中有明确说明

对于浮点转换 'e'、'E' 和 'f'，精度是小数点分隔符后的位数。如果转换是 'g' 或 'G'，那么精度是舍入计算后所得数值的所有位数。如果转换是 'a' 或 'A'，则不必指定精度。

对于字符、整数和日期/时间参数类型转换，以及百分比和行分隔符转换，精度是不适用的；如果提供精度，则会抛出异常。

到现在为止这套表达式公式已经基本讲完了,这套公式是针对于基本数据类型,和字符串的,如果是正对于时间类型的数据该怎么做呢,比如格式化日期

其实文档中已经给出说明了:
用来表示日期和时间类型的格式说明符的语法如下：

       %[argument_index$][flags][width]conversion
     

可选的 argument_index、flags 和 width 的定义同上。

所需的 conversion 是一个由两字符组成的序列。第一个字符是 't' 或 'T'。第二个字符表明所使用的格式。这些字符类似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的字符。

需要注意的是conversion 是一个由两字符组成的序列。第一个字符是 't' 或 'T'。

也就是说用conversion的时候首先必要写一个"t",然后在写其它conversion

时间类型有它自己的一套conversion,我们简单的选择几个来说:

'Y' 	年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。

'm' 	月份，被格式化为必要时带前导零的两位数，即 01 - 13。

'd' 	一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31

上面三个分别表示年月日

如果我要显示年份,我就可以"%tY",显示月份我就可以写"%tm",记得一定要带上"t"

那么本篇一开始提到的那串复杂的表达式现在看来是不是很简单呢:
[java] view plaincopy在CODE上查看代码片派生到我的代码片

    String s2 = String.format("%1$tY-%1$tm-%1$te", new Date());  
    System.out.println(s2);    

String.format()方法差不多讲完了,仔细看JDK文档也会慢慢了解的

需要批量进行格式化时,考虑下DateFormat, MessageFormat, NumberFormat 把他们封装成一个静态工具类或许更好

毕竟调用String.format()方法是会new一个Formatter对象,虽然有GC帮忙,但是平时编程的时候还是要考虑这些因素的

尽量少的创建对象,节省资源

