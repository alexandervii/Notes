在Ubuntu上下载、编译和安装Android最新内核源代码（Linux Kernel）
分类： Android 2011-06-23 22:53 91512人阅读 评论(139) 收藏 举报
androidlinuxlinux内核pathubuntu
      在前一篇文章提到，从源代码树下载下来的最新Android源代码，是不包括内核代码的，也就是Android源代码工程默认不包含Linux Kernel代码，而是使用预先编译好的内核，也就是prebuilt/android-arm/kernel/kernel-qemu文件。那么，如何才能DIY自己的内核呢？这篇文章一一道来。

      一. 首选，参照前一篇在Ubuntu上下载、编译和安装Android最新源代码准备好Android源代码目录。

      二. 下载Linux Kernel for Android源代码。

      1. 使用GIT工具下载，执行以下命令：

      USER-NAME@MACHINE-NAME:~/Android$ mkdir kernel

      USER-NAME@MACHINE-NAME:~/Android$ cd kernel
      USER-NAME@MACHINE-NAME:~/Android/kernel$ git clone http://android.googlesource.com/kernel/goldfish.git
      同样是经过漫长的等待后，在kernel目录下有一个common目录，Linux内核代码就在这里了。
      2. 下载完成后，可以查看下载的内核代码版本：
     USER-NAME@MACHINE-NAME:~/Android/kernel$ cd  common
      USER-NAME@MACHINE-NAME:~/Android/kernel/common$ git  branch
      android-2.6.36
      3. 上面得到的是主线上的内核源代码，现在我们需要适用于模拟器用的内核，因此，我们需要checkout goldfish版本：
     USER-NAME@MACHINE-NAME:~/Android/kernel/common$ git branch -a
      * android-2.6.36
      remotes/origin/HEAD -> origin/android-2.6.36
      remotes/origin/android-2.6.35
      remotes/origin/android-2.6.36
      remotes/origin/archive/android-2.6.25
      remotes/origin/archive/android-2.6.27
      remotes/origin/archive/android-2.6.29
      remotes/origin/archive/android-2.6.32
      remotes/origin/archive/android-gldfish-2.6.29
      remotes/origin/archive/android-goldfish-2.6.27
      选择android-gldfish-2.6.29：
      USER-NAME@MACHINE-NAME:~/Android/kernel/common$ git checkout remotes/origin/archive/android-gldfish-2.6.29
     三. 编译内核代码。
     1. 导出交叉编译工具目录到$PATH环境变量中去：
       USER-NAME@MACHINE-NAME:~/Android/kernel/common$ export PATH=$PATH:~/Android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin
     2. 修改common目录下的Makefile文件的以下两行为：
      # ARCH ?= (SUBARCH)
      # CROSS_COMPILE?= 
      ARCH ?= arm  #体系结构为arm
      CROSS_COMPILE     ?= arm-eabi- #交叉编译工具链前缀，参考~/Android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin目录 
      3. 开始编译：
      USER-NAME@MACHINE-NAME:~/Android/kernel/common$ make goldfish_defconfig
      USER-NAME@MACHINE-NAME:~/Android/kernel/common$ make
     编译成功后，可看到下面两行：
      OBJCOPY arch/arm/boot/zImage
      Kernel: arch/arm/boot/zImage is ready
      在执行make命令前，你也可以执行make menuconfig先配置一下编译选项。
     四. 在模拟器中运行编译好的内核。
     1. 在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去：
     USER-NAME@MACHINE-NAME:~/Android$ export PATH=$PATH:~/Android/out/host/linux-x86/bin
      2. 设置ANDROID_PRODUCT_OUT环境变量：
      USER-NAME@MACHINE-NAME:~/Android$ export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic
      3. 在后台中指定内核文件启动模拟器：
      USER-NAME@MACHINE-NAME:~/Android$  emulator -kernel ./kernel/common/arch/arm/boot/zImage &
      4. 用adb工具连接模拟器，查看内核版本信息，看看模拟器上跑的内核是不是我们刚才编译出来的内核：
      USER-NAME@MACHINE-NAME:~/Android$ adb shell
      这时候如果是第一次运行 adb shell命令，会看到以下输出，不用管它，再运行一次adb shell命令就可以了。
      * daemon not running. start it now on port 5037 *
      * daemon started successfully *
      error: device offline
      切换到proc目录：
      root@android:/ # cd proc
      root@android:/proc # cat version
      Linux version 2.6.29-gb0d93fb-dirty (luo@ubuntu-11-04) (gcc version 4.4.3 (GCC) ) #1 Fri Jun 3 23:17:24 HKT 2011
    从机器名luo@ubuntu-11-04和日期1 Fri Jun 3 23:17:24 HKT 2011可以看出，模拟器使用的内核即为刚刚编译出来的内核。

PS：主线上最新源代码是不稳定版本，使用过程可能会有问题
更正式的源码编译方法，请参看官网：http://source.android.com/source/building-kernels.html